import numpy as num
from numpy import zeros
import random
import math
from operator import attrgetter
import operator
from heapq import heappush, heappop
# ------------------- TO BE CHANGED LATER
# - make worlds 101 x 101
# - stop loop also if openList is empty

# executes the path
def main():

    # real world where 1's are blocks
    true_matrix = np.array([[0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0]])

    # mentalMatrix is initialized to be all 0's
    mentalMatrix = np.array([[0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0]])

    # initializes start state in top left corner
    start = Node (0,0,0,8,8,None)

    # initializes goal state in bottom right corner
    goal = Node (4,4,None,0,None,None)

    # 2 = start, 3 = goal
    mentalMatrix[start.x][start.y] = 2
    mentalMatrix[goal.x][goal.y] = 3

    print(mentalMatrix)

    # loop will run until it reaches goal
    while start.x != goal.x and start.y != goal.y:

        # node = the goal state
        node = computePath(start,goal,mentalMatrix)

        # if any -1, change back to 0, this can show final trail taken


        # increases visibility of mentalMatrix only if in bounds
        if start.x + 1 <= 4 and start.y + 1 <= 4:
            mentalMatrix[start.x + 1][start.y + 1] = true_matrix[start.x + 1][start.y + 1]
        if start.x + 1 <= 4 and start.y - 1 >= 0:
            mentalMatrix[start.x + 1][start.y - 1] = true_matrix[start.x + 1][start.y - 1]
        if start.x - 1 >= 0 and start.y + 1 <= 4:
            mentalMatrix[start.x - 1][start.y + 1] = true_matrix[start.x - 1][start.y + 1]
        if start.x - 1 >= 0 and start.y - 1 >= 0:
            mentalMatrix[start.x - 1][start.y - 1] = true_matrix[start.x - 1][start.y - 1]

        # same condition because only want to break out of this loop when done or hit a block
        while start.x != goal.x and start.y != goal.y:

            # 2 node ptrs, one points behind the other
            nodeCurr = node
            nodePrev = None
            nodePrev.direction = nodeCurr

            # loop until 'nodeCurr' = start coordinates, and then 'nodePrev'
            # will contain the coordinates where 'start' should be next run
            while nodeCurr.x != start.x and nodeCurr.y != start.y:
                nodePrev = nodeCurr
                nodeCurr = nodeCurr.direction

            
            print(mentalMatrix)

            # if 'nodePrev' planned state is a block, re-run 'computePath()'
            if true_matrix[nodePrev.x][nodePrev.y] == 1:

                # breaks out to go back to bigger loop and run 'computePath()'
                break
            else:
                # change 'start' locations
                start.x = nodePrev.x
                start.y = nodePrev.y

                # update mentalMatrix path to show whats been traversed, -1 means visited
                mentalMatrix[start.x][start.y] = -1

            # increases visibility of mentalMatrix only if in bounds
            if start.x + 1 <= 4 and start.y + 1 <= 4:
                mentalMatrix[start.x + 1][start.y + 1] = true_matrix[start.x + 1][start.y + 1]
            if start.x + 1 <= 4 and start.y - 1 >= 0:
                mentalMatrix[start.x + 1][start.y - 1] = true_matrix[start.x + 1][start.y - 1]
            if start.x - 1 >= 0 and start.y + 1 <= 4:
                mentalMatrix[start.x - 1][start.y + 1] = true_matrix[start.x - 1][start.y + 1]
            if start.x - 1 >= 0 and start.y - 1 >= 0:
                mentalMatrix[start.x - 1][start.y - 1] = true_matrix[start.x - 1][start.y - 1]

main()
