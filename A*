# matrix of nodes
# matrix of true grids ints (0 means free, 1 means blocked) cuz agent doens't know which are blocked so can't sear
# initialize Ol and CL, but start node inside
    # CL is an list, OL is a priority queue (heap)
# node class
    # int r, int c, int g, int h, int f, Node parent
# while loop until g(T) is top of heap in openList, which means you found shortest path
    # pop OL to CL
    # for loop for all neighboring cells (up to 4)
        # if neighbor is space char
            # create a node with appropriate x and y vals, use that to calculate the f val
        # 3 more if statements


import numpy as np
def star():
    A = []
    for x in range(5):
        A.append([' ' for y in range(5)])
    A[0][0] = 'S'
    r = 0
    c = 0
    A[4][4] = 'T'
    openList = []
    closedList = []
    g = 0
    h = 8
    f = g + h
    counter = 0
    target = float("inf")
    while
